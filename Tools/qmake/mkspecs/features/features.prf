# -------------------------------------------------------------------
# This file does basic 'configure' style checks to determine the
# set of ENABLE_FOO defines and their values.
#
# See 'Tools/qmake/README' for an overview of the build system
# -------------------------------------------------------------------

# Since features.prf is currently loaded from .pro/.pri files, not
# defaults_pre.prf, we have at this point parsed any optional command
# line arguments to qmake (eg qmake DEFINES+=ENABLE_VIDEO=0), that are
# intended to override default values (static or dynamic) of the
# feature defines.
#
# This is why the checks below look for !contains(DEFINES, ENABLE_FOO=.)
# so that the static or dynamic defaults will only be set if the user did
# not make an explicit choice by passing an argument to qmake/build-webkit.

# ------------- Prepare for feature detection -------------

## load mobilityconfig if mobility is available
load(mobilityconfig, true)

# ---------- Dynamically detect optional features -------------
#
# Please note, static feature defaults go in features.pri
#
# Do not add new CONFIG options, but use the existing patterns
# of WTF_USE, ENABLE_, etc, and detect the precense of those
# defines in the relevant target files. You do not need to have
# a fallback in your logic for the disabling feature, that's handled
# by having the feature disabled in features.pri. Nor do you have to
# unset the opposite value, that's handled automatically for you.

# For Mac we do not rely on QT_CONFIG, because icu is not officially supported for all of qt.
haveQt(5):if(contains(QT_CONFIG,icu)|mac) {
    DEFINES += WTF_USE_ICU_UNICODE=1
    DEFINES -= WTF_USE_QT4_UNICODE=1
} else {
    DEFINES += WTF_USE_QT4_UNICODE=1
    DEFINES -= WTF_USE_ICU_UNICODE=1
}

!contains(DEFINES, HAVE_QRAWFONT=.) {
    # Use of QRawFont in Qt 5:
    haveQt(5): DEFINES += HAVE_QRAWFONT=1
}

# We need fontconfig to set up the test fonts for DumpRenderTree and WebKitTestRunner.
haveQt(5) {
    config_fontconfig:!mac {
        DEFINES += HAVE_FONTCONFIG=1
    }
} else {
    # Qt 4
    unix:!mac:!embedded {
        DEFINES += HAVE_FONTCONFIG=1
    }
}

!contains(DEFINES, HAVE_QTQUICK=.) {
    haveQtModule(quick): DEFINES += HAVE_QTQUICK=1
    else: CONFIGURE_WARNINGS += "QtQuick module not found, QML APIs will not be built"
}

!contains(DEFINES, HAVE_QTPRINTSUPPORT=.) {
    haveQt(4)|haveQtModule(printsupport): DEFINES += HAVE_QTPRINTSUPPORT=1
}

!contains(DEFINES, HAVE_QTTESTLIB=.) {
    haveQt(4)|haveQtModule(testlib) {
        DEFINES += HAVE_QTTESTLIB=1
    } else {
        message("Missing QtTest module, disabling DumpRenderTree, WebKitTestRunner and tests")
    }
}

# We need libxml2 and libxslt to be able to replace Qt xmlpatterns.
!contains(DEFINES, ENABLE_XSLT=.) {
    packagesExist(libxml-2.0,libxslt): DEFINES +=  WTF_USE_LIBXML2=1
}

# We need zlib to use enable websocket extension.
!contains(DEFINES, WTF_USE_ZLIB=.) {
    packagesExist(zlib): DEFINES += WTF_USE_ZLIB=1
}

# Tiled Backing Store support
!contains(DEFINES, WTF_USE_TILED_BACKING_STORE=.): DEFINES += WTF_USE_TILED_BACKING_STORE=1

# Turn on legacy viewport adaption
!contains(DEFINES, ENABLE_LEGACY_VIEWPORT_ADAPTION=.): DEFINES += ENABLE_LEGACY_VIEWPORT_ADAPTION=1

# Nescape plugins support (NPAPI)
!contains(DEFINES, ENABLE_NETSCAPE_PLUGIN_API=.) {
    haveQt(5):xlibAvailable() {
        DEFINES += ENABLE_NETSCAPE_PLUGIN_API=1
        CONFIG += plugin_backend_xlib
    } else: unix|win32-*:!embedded:!wince* {
        DEFINES += ENABLE_NETSCAPE_PLUGIN_API=1
    }
}

# Netscape plugins support for WebKit2
!contains(DEFINES, PLUGIN_ARCHITECTURE_UNSUPPORTED=.) {
    no_webkit2 {
        DEFINES += PLUGIN_ARCHITECTURE_UNSUPPORTED=1
    } else {
        contains(QT_CONFIG, xcb-xlib) {
            CONFIG += plugin_backend_xlib
            DEFINES += PLUGIN_ARCHITECTURE_X11=1 \
                       PLUGIN_ARCHITECTURE_UNSUPPORTED=0 \
                       ENABLE_PLUGIN_PROCESS=1
        } else {
            DEFINES += PLUGIN_ARCHITECTURE_UNSUPPORTED=1
        }
    }
}

# QStyle detection
haveQt(4)|haveQtModule(widgets): DEFINES += HAVE_QSTYLE=1

# Enable the USE(3D_GRAPHICS) when QtOpenGL is enabled.
# Disable on Windows CE for now, as ANGLE won't compile.
!contains(DEFINES, WTF_USE_3D_GRAPHICS=.):!wince*:contains(QT_CONFIG, opengl) {
    # On Windows we require GLES2/EGL through ANGLE.
    !win32|contains(QT_CONFIG, opengles2): DEFINES += WTF_USE_3D_GRAPHICS=1
}

# Temporarily disable FTPDIR on Windows CE (missing functions from time.h)
wince* {
    DEFINES -= ENABLE_FTPDIR=1
}

# WebGL support - only enabled if we can use 3D graphics
!contains(DEFINES, ENABLE_WEBGL=.):contains(DEFINES, WTF_USE_3D_GRAPHICS=1) {
    DEFINES += ENABLE_WEBGL=1
}

haveQt(4):contains(DEFINES, ENABLE_WEBGL=1):contains(DEFINES, WTF_USE_3D_GRAPHICS=0) {
    error("WebGL requires Qt to be configured with OpenGL. Please reconfigure Qt with OpenGL, or build WebKit without WebGL.")
}

# CSS filters support
!contains(DEFINES, ENABLE_CSS_FILTERS=.): DEFINES += ENABLE_CSS_FILTERS=1

# CSS Shaders support
!contains(DEFINES, ENABLE_CSS_SHADERS=.) {
    # Enable CSS shaders when CSS filters and WebGL are enabled.
    contains(DEFINES, ENABLE_CSS_FILTERS=1):contains(DEFINES, ENABLE_WEBGL=1): DEFINES += ENABLE_CSS_SHADERS=1
}

!contains(DEFINES, ENABLE_XSLT=.) {
    # Using QtXmlPatterns or libxml2
    contains(QT_CONFIG, xmlpatterns)|contains(DEFINES, WTF_USE_LIBXML2=1): DEFINES += ENABLE_XSLT=1
}

# Geolocation support if QtMobility exists
!contains(DEFINES, ENABLE_GEOLOCATION=.) {
    contains(MOBILITY_CONFIG, location)|contains(QT_CONFIG, location) {
       DEFINES += ENABLE_GEOLOCATION=1
    }
}

# orientation support
haveQt(5) {
    haveQtModule(sensors) {
        !contains(DEFINES, ENABLE_ORIENTATION_EVENTS=.): DEFINES += ENABLE_ORIENTATION_EVENTS=1
        !contains(DEFINES, ENABLE_DEVICE_ORIENTATION=.): DEFINES += ENABLE_DEVICE_ORIENTATION=1
    }
} else {
    # Qt 4 with Qt Mobility
    contains(MOBILITY_CONFIG, sensors) {
        !contains(DEFINES, ENABLE_ORIENTATION_EVENTS=.): DEFINES += ENABLE_ORIENTATION_EVENTS=1
        !contains(DEFINES, ENABLE_DEVICE_ORIENTATION=.): DEFINES += ENABLE_DEVICE_ORIENTATION=1
    }
}

# HTML5 Media Support
!contains(DEFINES, ENABLE_VIDEO=.) {
    mac:!contains(DEFINES, USE_QTMULTIMEDIA=1) {
        DARWIN_VERSION = $$split(QMAKE_HOST.version, ".")
        DARWIN_MAJOR_VERSION = $$first(DARWIN_VERSION)
        # QTKIT support requires 10.7 or newer
        greaterThan(DARWIN_MAJOR_VERSION, 10) {
            DEFINES += ENABLE_VIDEO=1
            DEFINES += WTF_USE_QTKIT=1
        }
    } else: linux-*:!contains(DEFINES, USE_QTMULTIMEDIA=1) {
        !contains(QT_CONFIG, no-pkg-config):system(pkg-config --exists glib-2.0 gio-2.0 \'gstreamer-0.10 >= 0.10.30\' \'gstreamer-plugins-base-0.10 >= 0.10.30\'): {
            DEFINES += ENABLE_VIDEO=1
            DEFINES += WTF_USE_GSTREAMER=1
        } else {
            root_project_file: message("Missing GLib/Gio/GStreamer, disabling media element support")
        }
    } else: contains(MOBILITY_CONFIG, multimedia) {
        DEFINES += ENABLE_VIDEO=1
        DEFINES += WTF_USE_QT_MULTIMEDIA=1
    }
}

!contains(DEFINES, ENABLE_FULLSCREEN_API=.) {
    !no_webkit2: DEFINES += ENABLE_FULLSCREEN_API=1
}

haveQt(4) {
    haveQtModule(declarative): DEFINES += HAVE_QQUICK1=1
} else {
    # FIXME: Add Qt 5 QQuick1 support once QDeclarativeEngine in QQuick2
    # is called QmlEngine and it is safe for us to use QQuick1 again.
}

# Try to use an system wide SQlite installation
if(!contains(QT_CONFIG, no-pkg-config):packagesExist("sqlite3"))|mac {
    DEFINES += HAVE_SQLITE3=1
} else {
    SQLITE3SRCDIR = $$(SQLITE3SRCDIR)
    isEmpty(SQLITE3SRCDIR):isEmpty(_QMAKE_SUPER_CACHE_): error("WebKit requires SQLite. Either make it available via pkg-config, set $SQLITE3SRCDIR or build WebKit under qt5.git.")
}

# Gamepad API Support
linux-*:!contains(DEFINES, ENABLE_GAMEPAD=.) {
    packagesExist(libudev): DEFINES += ENABLE_GAMEPAD=1
}

# Xcomposite Support
haveQt(5):linux-*:config_libXcomposite: DEFINES += HAVE_XCOMPOSITE=1

# Xrender Support
haveQt(5):linux-*:config_libXrender: DEFINES += HAVE_XRENDER=1

# GLX Support
haveQt(5):linux-*:config_glx:!contains(QT_CONFIG, opengles2): DEFINES += HAVE_GLX=1

# Support for Graphics Surface
# GraphicsSurface requires GraphicsContext3D and hence use_3d_graphics
# GraphicsSurface has not been ported to Qt4 yet.
haveQt(5):contains(DEFINES, WTF_USE_3D_GRAPHICS=1) {
    mac: DEFINES += WTF_USE_GRAPHICS_SURFACE=1
    win32:contains(QT_CONFIG, opengles2): DEFINES += WTF_USE_GRAPHICS_SURFACE=1
    # On linux we require GLX, libXcomposite and libXrender to enable graphics surface.
    linux-*:contains(DEFINES, HAVE_GLX=1):contains(DEFINES, HAVE_XCOMPOSITE=1):contains(DEFINES, HAVE_XRENDER=1): DEFINES += WTF_USE_GRAPHICS_SURFACE=1
}

# WebKit2 uses the shared cookiejar for persistant cookies.
!no_webkit2: DEFINES += ENABLE_QT_SHARED_COOKIEJAR=1

# -------------- Fill in static defaults --------------
#
# Only applies to features that don't have a dynamic default
# or have been overriden on the command line.

include(features.pri)

for(feature, FEATURE_DEFAULTS) {
    anyFeatureDefine = $$replace(feature, =.$, =.)
    !contains(DEFINES, $$anyFeatureDefine) {
        DEFINES += $$feature
    }
}

# ---------------- Sanitize defines -------------------

# Disable SVG fonts if SVG is disabled or we don't have raw fonts
contains(DEFINES, ENABLE_SVG=0)|!contains(DEFINES, HAVE_QRAWFONT=1): DEFINES += ENABLE_SVG_FONTS=0

# JavaScript debugger requires the inspector
contains(DEFINES, ENABLE_INSPECTOR=0) {
    DEFINES += ENABLE_JAVASCRIPT_DEBUGGER=0
    DEFINES += ENABLE_INSPECTOR_SERVER=0
}

# Disable animated smooth scrolling if request-animation-frame is disabled
contains(DEFINES, ENABLE_REQUEST_ANIMATION_FRAME=0): DEFINES += ENABLE_SMOOTH_SCROLLING=0

# Remove conflicting defines. The preprocessor would take care of this
# anyways, but doing it here makes for nicer command lines when building.
for(define, DEFINES) {
    parts = $$split(define, =)
    value = $$member(parts, 1, 1)
    isEmpty(value): next()

    equals(value, 1): opposite = $$replace(define, =1$, =0)
    equals(value, 0): opposite = $$replace(define, =0$, =1)

    # Is there a later define that overrides this one?
    contains(DEFINES, $$opposite): DEFINES -= $$define
}

contains(DEFINES, ENABLE_GAMEPAD=1) {
    !packagesExist(libudev) {
        error("Gamepad API requires libudev to build. Please install libudev development files, or build WebKit without gamepad.")
    } else:!linux-* {
        error("Currently the Gamepad API is supported only on Linux, build WebKit without gamepad.")
    }
}

# Slider Touch is sensible to use when compiling WebKit2
haveQt(5):contains(DEFINES, ENABLE_TOUCH_EVENTS=1) {
    DEFINES += ENABLE_TOUCH_SLIDER=1
}
